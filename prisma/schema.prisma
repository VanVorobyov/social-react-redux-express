// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  // Уникальный идентификатор, автоматически генерируется и сопоставляется с полем "_id" в MongoDB.
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  // Обязательное уникальное поле электронной почты типа строка.
  email       String    @unique
  // Обязательное поле пароля типа строка.
  password    String
  // Необязательное поле имени типа строка.
  name        String?
  // Необязательное поле URL аватара типа строка.
  avatarUrl   String?
  // Необязательное поле даты рождения типа дата-время.
  dateOfBirth DateTime?
  // Дата создания пользователя, автоматически устанавливается в момент создания типа дата-время.
  createdAt   DateTime  @default(now())
  // Дата последнего обновления пользователя, автоматически обновляется при каждом изменении типа дата-время.
  updatedAt   DateTime  @updatedAt
  // Необязательное поле биографии типа строка.
  bio         String?
  // Необязательное поле местоположения типа строка.
  location    String?
  // Массив постов, созданных пользователем типа Post.
  posts       Post[]
  // Массив лайков, поставленных пользователем типа Like.
  likes       Like[]
  // Массив комментариев, оставленных пользователем типа Comment.
  comments    Comment[]
  // Массив пользователей, которых данный пользователь подписан (следит).
  followers   Follows[] @relation("following")
  // Массив пользователей, которые подписаны на данный пользователь (его подписчики).
  following   Follows[] @relation("follower")
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
}

model Follows {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String @db.ObjectId
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String @db.ObjectId
}
